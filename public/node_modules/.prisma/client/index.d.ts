
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Organization
 */

export type Organization = {
  id: number
  name: string | null
}

/**
 * Model User
 */

export type User = {
  id: number
  firstName: string | null
  lastName: string | null
  email: string
  passwordHash: string | null
  authCode: string | null
  authCodeExpiresAt: Date | null
}

/**
 * Model ApiKey
 */

export type ApiKey = {
  id: number
  organizationId: number
  apiKey: string | null
}

/**
 * Model PingSetup
 */

export type PingSetup = {
  id: number
  organizationId: number
  name: string
  groupName: string
  emails: string[]
  notified: boolean
}

/**
 * Model Ping
 */

export type Ping = {
  id: number
  pingSetupId: number
  title: string | null
  tagName: string | null
  details: string | null
  progressBar: number | null
  interval: number
  time: Date
  success: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Organizations
 * const organizations = await prisma.organization.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<GlobalReject>;

  /**
   * `prisma.pingSetup`: Exposes CRUD operations for the **PingSetup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PingSetups
    * const pingSetups = await prisma.pingSetup.findMany()
    * ```
    */
  get pingSetup(): Prisma.PingSetupDelegate<GlobalReject>;

  /**
   * `prisma.ping`: Exposes CRUD operations for the **Ping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pings
    * const pings = await prisma.ping.findMany()
    * ```
    */
  get ping(): Prisma.PingDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.26.0
   * Query Engine version: 9b816b3aa13cc270074f172f30d6eda8a8ce867d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Organization: 'Organization',
    User: 'User',
    ApiKey: 'ApiKey',
    PingSetup: 'PingSetup',
    Ping: 'Ping'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Organization
   */


  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
    max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type OrganizationAggregateArgs = {
    /**
     * Filter which Organization to aggregate.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }


    
    
  export type OrganizationGroupByArgs = {
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByInput>
    by: Array<OrganizationScalarFieldEnum>
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }


  export type OrganizationGroupByOutputType = {
    id: number
    name: string | null
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Promise<
    Array<
      PickArray<OrganizationGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]> 
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      > 
    >


  export type OrganizationSelect = {
    id?: boolean
    name?: boolean
    users?: boolean | UserFindManyArgs
    apiKeys?: boolean | ApiKeyFindManyArgs
    pingSetups?: boolean | PingSetupFindManyArgs
  }

  export type OrganizationInclude = {
    users?: boolean | UserFindManyArgs
    apiKeys?: boolean | ApiKeyFindManyArgs
    pingSetups?: boolean | PingSetupFindManyArgs
  }

  export type OrganizationGetPayload<
    S extends boolean | null | undefined | OrganizationArgs,
    U = keyof S
      > = S extends true
        ? Organization
    : S extends undefined
    ? never
    : S extends OrganizationArgs | OrganizationFindManyArgs
    ?'include' extends U
    ? Organization  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'apiKeys'
        ? Array < ApiKeyGetPayload<S['include'][P]>>  :
        P extends 'pingSetups'
        ? Array < PingSetupGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Organization ?Organization [P]
  : 
          P extends 'users'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'apiKeys'
        ? Array < ApiKeyGetPayload<S['select'][P]>>  :
        P extends 'pingSetups'
        ? Array < PingSetupGetPayload<S['select'][P]>>  : never
  } 
    : Organization
  : Organization


  type OrganizationCountArgs = Merge<
    Omit<OrganizationFindManyArgs, 'select' | 'include'> & {
      select?: OrganizationCountAggregateInputType | true
    }
  >

  export interface OrganizationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganizationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Organization'> extends True ? CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>> : CheckSelect<T, Prisma__OrganizationClient<Organization | null >, Prisma__OrganizationClient<OrganizationGetPayload<T> | null >>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganizationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Organization'> extends True ? CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>> : CheckSelect<T, Prisma__OrganizationClient<Organization | null >, Prisma__OrganizationClient<OrganizationGetPayload<T> | null >>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationFindManyArgs>(
      args?: SelectSubset<T, OrganizationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Organization>>, PrismaPromise<Array<OrganizationGetPayload<T>>>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs>(
      args: SelectSubset<T, OrganizationCreateArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Create many Organizations.
     *     @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     *     @example
     *     // Create many Organizations
     *     const organization = await prisma.organization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizationCreateManyArgs>(
      args?: SelectSubset<T, OrganizationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs>(
      args: SelectSubset<T, OrganizationDeleteArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs>(
      args: SelectSubset<T, OrganizationUpdateArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs>(
      args?: SelectSubset<T, OrganizationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs>(
      args: SelectSubset<T, OrganizationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs>(
      args: SelectSubset<T, OrganizationUpsertArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    apiKeys<T extends ApiKeyFindManyArgs = {}>(args?: Subset<T, ApiKeyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ApiKey>>, PrismaPromise<Array<ApiKeyGetPayload<T>>>>;

    pingSetups<T extends PingSetupFindManyArgs = {}>(args?: Subset<T, PingSetupFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PingSetup>>, PrismaPromise<Array<PingSetupGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Throw an Error if a Organization can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Organization to fetch.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Throw an Error if a Organization can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Organization to fetch.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     * 
    **/
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Filter, which Organizations to fetch.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization create
   */
  export type OrganizationCreateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The data needed to create a Organization.
     * 
    **/
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }


  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs = {
    data: Enumerable<OrganizationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Organization update
   */
  export type OrganizationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The data needed to update a Organization.
     * 
    **/
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs = {
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    where?: OrganizationWhereInput
  }


  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The filter to search for the Organization to update in case it exists.
     * 
    **/
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     * 
    **/
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }


  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Filter which Organization to delete.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs = {
    where?: OrganizationWhereInput
  }


  /**
   * Organization without action
   */
  export type OrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    passwordHash: string | null
    authCode: string | null
    authCodeExpiresAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    passwordHash: string | null
    authCode: string | null
    authCodeExpiresAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    passwordHash: number
    authCode: number
    authCodeExpiresAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    authCode?: true
    authCodeExpiresAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    authCode?: true
    authCodeExpiresAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    authCode?: true
    authCodeExpiresAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    email: string
    passwordHash: string | null
    authCode: string | null
    authCodeExpiresAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    organizations?: boolean | OrganizationFindManyArgs
    authCode?: boolean
    authCodeExpiresAt?: boolean
  }

  export type UserInclude = {
    organizations?: boolean | OrganizationFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'organizations'
        ? Array < OrganizationGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'organizations'
        ? Array < OrganizationGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    organizations<T extends OrganizationFindManyArgs = {}>(args?: Subset<T, OrganizationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Organization>>, PrismaPromise<Array<OrganizationGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model ApiKey
   */


  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    count: ApiKeyCountAggregateOutputType | null
    _avg: ApiKeyAvgAggregateOutputType | null
    avg: ApiKeyAvgAggregateOutputType | null
    _sum: ApiKeySumAggregateOutputType | null
    sum: ApiKeySumAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
    max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type ApiKeySumAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type ApiKeyMinAggregateOutputType = {
    id: number | null
    organizationId: number | null
    apiKey: string | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    id: number | null
    organizationId: number | null
    apiKey: string | null
  }

  export type ApiKeyCountAggregateOutputType = {
    id: number
    organizationId: number
    apiKey: number
    _all: number
  }


  export type ApiKeyAvgAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type ApiKeySumAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type ApiKeyMinAggregateInputType = {
    id?: true
    organizationId?: true
    apiKey?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    id?: true
    organizationId?: true
    apiKey?: true
  }

  export type ApiKeyCountAggregateInputType = {
    id?: true
    organizationId?: true
    apiKey?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs = {
    /**
     * Filter which ApiKey to aggregate.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiKeyAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: ApiKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiKeySumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: ApiKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }


    
    
  export type ApiKeyGroupByArgs = {
    where?: ApiKeyWhereInput
    orderBy?: Enumerable<ApiKeyOrderByInput>
    by: Array<ApiKeyScalarFieldEnum>
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _avg?: ApiKeyAvgAggregateInputType
    _sum?: ApiKeySumAggregateInputType
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }


  export type ApiKeyGroupByOutputType = {
    id: number
    organizationId: number
    apiKey: string | null
    _count: ApiKeyCountAggregateOutputType | null
    _avg: ApiKeyAvgAggregateOutputType | null
    _sum: ApiKeySumAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = Promise<
    Array<
      PickArray<ApiKeyGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]> 
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      > 
    >


  export type ApiKeySelect = {
    id?: boolean
    organization?: boolean | OrganizationArgs
    organizationId?: boolean
    apiKey?: boolean
  }

  export type ApiKeyInclude = {
    organization?: boolean | OrganizationArgs
  }

  export type ApiKeyGetPayload<
    S extends boolean | null | undefined | ApiKeyArgs,
    U = keyof S
      > = S extends true
        ? ApiKey
    : S extends undefined
    ? never
    : S extends ApiKeyArgs | ApiKeyFindManyArgs
    ?'include' extends U
    ? ApiKey  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'organization'
        ? OrganizationGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ApiKey ?ApiKey [P]
  : 
          P extends 'organization'
        ? OrganizationGetPayload<S['select'][P]> : never
  } 
    : ApiKey
  : ApiKey


  type ApiKeyCountArgs = Merge<
    Omit<ApiKeyFindManyArgs, 'select' | 'include'> & {
      select?: ApiKeyCountAggregateInputType | true
    }
  >

  export interface ApiKeyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApiKeyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApiKeyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ApiKey'> extends True ? CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>> : CheckSelect<T, Prisma__ApiKeyClient<ApiKey | null >, Prisma__ApiKeyClient<ApiKeyGetPayload<T> | null >>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApiKeyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApiKeyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ApiKey'> extends True ? CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>> : CheckSelect<T, Prisma__ApiKeyClient<ApiKey | null >, Prisma__ApiKeyClient<ApiKeyGetPayload<T> | null >>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApiKeyFindManyArgs>(
      args?: SelectSubset<T, ApiKeyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ApiKey>>, PrismaPromise<Array<ApiKeyGetPayload<T>>>>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
    **/
    create<T extends ApiKeyCreateArgs>(
      args: SelectSubset<T, ApiKeyCreateArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Create many ApiKeys.
     *     @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     *     @example
     *     // Create many ApiKeys
     *     const apiKey = await prisma.apiKey.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApiKeyCreateManyArgs>(
      args?: SelectSubset<T, ApiKeyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
    **/
    delete<T extends ApiKeyDeleteArgs>(
      args: SelectSubset<T, ApiKeyDeleteArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApiKeyUpdateArgs>(
      args: SelectSubset<T, ApiKeyUpdateArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApiKeyDeleteManyArgs>(
      args?: SelectSubset<T, ApiKeyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApiKeyUpdateManyArgs>(
      args: SelectSubset<T, ApiKeyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
    **/
    upsert<T extends ApiKeyUpsertArgs>(
      args: SelectSubset<T, ApiKeyUpsertArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApiKeyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    organization<T extends OrganizationArgs = {}>(args?: Subset<T, OrganizationArgs>): CheckSelect<T, Prisma__OrganizationClient<Organization | null >, Prisma__OrganizationClient<OrganizationGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ApiKey findUnique
   */
  export type ApiKeyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Throw an Error if a ApiKey can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ApiKey to fetch.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey findFirst
   */
  export type ApiKeyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Throw an Error if a ApiKey can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ApiKey to fetch.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     * 
    **/
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Filter, which ApiKeys to fetch.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The data needed to create a ApiKey.
     * 
    **/
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }


  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs = {
    data: Enumerable<ApiKeyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The data needed to update a ApiKey.
     * 
    **/
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs = {
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    where?: ApiKeyWhereInput
  }


  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     * 
    **/
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     * 
    **/
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }


  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Filter which ApiKey to delete.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs = {
    where?: ApiKeyWhereInput
  }


  /**
   * ApiKey without action
   */
  export type ApiKeyArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
  }



  /**
   * Model PingSetup
   */


  export type AggregatePingSetup = {
    _count: PingSetupCountAggregateOutputType | null
    count: PingSetupCountAggregateOutputType | null
    _avg: PingSetupAvgAggregateOutputType | null
    avg: PingSetupAvgAggregateOutputType | null
    _sum: PingSetupSumAggregateOutputType | null
    sum: PingSetupSumAggregateOutputType | null
    _min: PingSetupMinAggregateOutputType | null
    min: PingSetupMinAggregateOutputType | null
    _max: PingSetupMaxAggregateOutputType | null
    max: PingSetupMaxAggregateOutputType | null
  }

  export type PingSetupAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type PingSetupSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type PingSetupMinAggregateOutputType = {
    id: number | null
    organizationId: number | null
    name: string | null
    groupName: string | null
    notified: boolean | null
  }

  export type PingSetupMaxAggregateOutputType = {
    id: number | null
    organizationId: number | null
    name: string | null
    groupName: string | null
    notified: boolean | null
  }

  export type PingSetupCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    groupName: number
    emails: number
    notified: number
    _all: number
  }


  export type PingSetupAvgAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type PingSetupSumAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type PingSetupMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    groupName?: true
    notified?: true
  }

  export type PingSetupMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    groupName?: true
    notified?: true
  }

  export type PingSetupCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    groupName?: true
    emails?: true
    notified?: true
    _all?: true
  }

  export type PingSetupAggregateArgs = {
    /**
     * Filter which PingSetup to aggregate.
     * 
    **/
    where?: PingSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PingSetups to fetch.
     * 
    **/
    orderBy?: Enumerable<PingSetupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PingSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PingSetups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PingSetups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PingSetups
    **/
    _count?: true | PingSetupCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | PingSetupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PingSetupAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: PingSetupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PingSetupSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: PingSetupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PingSetupMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: PingSetupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PingSetupMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: PingSetupMaxAggregateInputType
  }

  export type GetPingSetupAggregateType<T extends PingSetupAggregateArgs> = {
        [P in keyof T & keyof AggregatePingSetup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePingSetup[P]>
      : GetScalarType<T[P], AggregatePingSetup[P]>
  }


    
    
  export type PingSetupGroupByArgs = {
    where?: PingSetupWhereInput
    orderBy?: Enumerable<PingSetupOrderByInput>
    by: Array<PingSetupScalarFieldEnum>
    having?: PingSetupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PingSetupCountAggregateInputType | true
    _avg?: PingSetupAvgAggregateInputType
    _sum?: PingSetupSumAggregateInputType
    _min?: PingSetupMinAggregateInputType
    _max?: PingSetupMaxAggregateInputType
  }


  export type PingSetupGroupByOutputType = {
    id: number
    organizationId: number
    name: string
    groupName: string
    emails: string[]
    notified: boolean
    _count: PingSetupCountAggregateOutputType | null
    _avg: PingSetupAvgAggregateOutputType | null
    _sum: PingSetupSumAggregateOutputType | null
    _min: PingSetupMinAggregateOutputType | null
    _max: PingSetupMaxAggregateOutputType | null
  }

  type GetPingSetupGroupByPayload<T extends PingSetupGroupByArgs> = Promise<
    Array<
      PickArray<PingSetupGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PingSetupGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PingSetupGroupByOutputType[P]> 
            : GetScalarType<T[P], PingSetupGroupByOutputType[P]>
        }
      > 
    >


  export type PingSetupSelect = {
    id?: boolean
    organization?: boolean | OrganizationArgs
    organizationId?: boolean
    name?: boolean
    groupName?: boolean
    emails?: boolean
    notified?: boolean
    pings?: boolean | PingFindManyArgs
  }

  export type PingSetupInclude = {
    organization?: boolean | OrganizationArgs
    pings?: boolean | PingFindManyArgs
  }

  export type PingSetupGetPayload<
    S extends boolean | null | undefined | PingSetupArgs,
    U = keyof S
      > = S extends true
        ? PingSetup
    : S extends undefined
    ? never
    : S extends PingSetupArgs | PingSetupFindManyArgs
    ?'include' extends U
    ? PingSetup  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'organization'
        ? OrganizationGetPayload<S['include'][P]> :
        P extends 'pings'
        ? Array < PingGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PingSetup ?PingSetup [P]
  : 
          P extends 'organization'
        ? OrganizationGetPayload<S['select'][P]> :
        P extends 'pings'
        ? Array < PingGetPayload<S['select'][P]>>  : never
  } 
    : PingSetup
  : PingSetup


  type PingSetupCountArgs = Merge<
    Omit<PingSetupFindManyArgs, 'select' | 'include'> & {
      select?: PingSetupCountAggregateInputType | true
    }
  >

  export interface PingSetupDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PingSetup that matches the filter.
     * @param {PingSetupFindUniqueArgs} args - Arguments to find a PingSetup
     * @example
     * // Get one PingSetup
     * const pingSetup = await prisma.pingSetup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PingSetupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PingSetupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PingSetup'> extends True ? CheckSelect<T, Prisma__PingSetupClient<PingSetup>, Prisma__PingSetupClient<PingSetupGetPayload<T>>> : CheckSelect<T, Prisma__PingSetupClient<PingSetup | null >, Prisma__PingSetupClient<PingSetupGetPayload<T> | null >>

    /**
     * Find the first PingSetup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingSetupFindFirstArgs} args - Arguments to find a PingSetup
     * @example
     * // Get one PingSetup
     * const pingSetup = await prisma.pingSetup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PingSetupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PingSetupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PingSetup'> extends True ? CheckSelect<T, Prisma__PingSetupClient<PingSetup>, Prisma__PingSetupClient<PingSetupGetPayload<T>>> : CheckSelect<T, Prisma__PingSetupClient<PingSetup | null >, Prisma__PingSetupClient<PingSetupGetPayload<T> | null >>

    /**
     * Find zero or more PingSetups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingSetupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PingSetups
     * const pingSetups = await prisma.pingSetup.findMany()
     * 
     * // Get first 10 PingSetups
     * const pingSetups = await prisma.pingSetup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pingSetupWithIdOnly = await prisma.pingSetup.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PingSetupFindManyArgs>(
      args?: SelectSubset<T, PingSetupFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PingSetup>>, PrismaPromise<Array<PingSetupGetPayload<T>>>>

    /**
     * Create a PingSetup.
     * @param {PingSetupCreateArgs} args - Arguments to create a PingSetup.
     * @example
     * // Create one PingSetup
     * const PingSetup = await prisma.pingSetup.create({
     *   data: {
     *     // ... data to create a PingSetup
     *   }
     * })
     * 
    **/
    create<T extends PingSetupCreateArgs>(
      args: SelectSubset<T, PingSetupCreateArgs>
    ): CheckSelect<T, Prisma__PingSetupClient<PingSetup>, Prisma__PingSetupClient<PingSetupGetPayload<T>>>

    /**
     * Create many PingSetups.
     *     @param {PingSetupCreateManyArgs} args - Arguments to create many PingSetups.
     *     @example
     *     // Create many PingSetups
     *     const pingSetup = await prisma.pingSetup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PingSetupCreateManyArgs>(
      args?: SelectSubset<T, PingSetupCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PingSetup.
     * @param {PingSetupDeleteArgs} args - Arguments to delete one PingSetup.
     * @example
     * // Delete one PingSetup
     * const PingSetup = await prisma.pingSetup.delete({
     *   where: {
     *     // ... filter to delete one PingSetup
     *   }
     * })
     * 
    **/
    delete<T extends PingSetupDeleteArgs>(
      args: SelectSubset<T, PingSetupDeleteArgs>
    ): CheckSelect<T, Prisma__PingSetupClient<PingSetup>, Prisma__PingSetupClient<PingSetupGetPayload<T>>>

    /**
     * Update one PingSetup.
     * @param {PingSetupUpdateArgs} args - Arguments to update one PingSetup.
     * @example
     * // Update one PingSetup
     * const pingSetup = await prisma.pingSetup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PingSetupUpdateArgs>(
      args: SelectSubset<T, PingSetupUpdateArgs>
    ): CheckSelect<T, Prisma__PingSetupClient<PingSetup>, Prisma__PingSetupClient<PingSetupGetPayload<T>>>

    /**
     * Delete zero or more PingSetups.
     * @param {PingSetupDeleteManyArgs} args - Arguments to filter PingSetups to delete.
     * @example
     * // Delete a few PingSetups
     * const { count } = await prisma.pingSetup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PingSetupDeleteManyArgs>(
      args?: SelectSubset<T, PingSetupDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PingSetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingSetupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PingSetups
     * const pingSetup = await prisma.pingSetup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PingSetupUpdateManyArgs>(
      args: SelectSubset<T, PingSetupUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PingSetup.
     * @param {PingSetupUpsertArgs} args - Arguments to update or create a PingSetup.
     * @example
     * // Update or create a PingSetup
     * const pingSetup = await prisma.pingSetup.upsert({
     *   create: {
     *     // ... data to create a PingSetup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PingSetup we want to update
     *   }
     * })
    **/
    upsert<T extends PingSetupUpsertArgs>(
      args: SelectSubset<T, PingSetupUpsertArgs>
    ): CheckSelect<T, Prisma__PingSetupClient<PingSetup>, Prisma__PingSetupClient<PingSetupGetPayload<T>>>

    /**
     * Count the number of PingSetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingSetupCountArgs} args - Arguments to filter PingSetups to count.
     * @example
     * // Count the number of PingSetups
     * const count = await prisma.pingSetup.count({
     *   where: {
     *     // ... the filter for the PingSetups we want to count
     *   }
     * })
    **/
    count<T extends PingSetupCountArgs>(
      args?: Subset<T, PingSetupCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PingSetupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PingSetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingSetupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PingSetupAggregateArgs>(args: Subset<T, PingSetupAggregateArgs>): PrismaPromise<GetPingSetupAggregateType<T>>

    /**
     * Group by PingSetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingSetupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PingSetupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PingSetupGroupByArgs['orderBy'] }
        : { orderBy?: PingSetupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PingSetupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPingSetupGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PingSetup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PingSetupClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    organization<T extends OrganizationArgs = {}>(args?: Subset<T, OrganizationArgs>): CheckSelect<T, Prisma__OrganizationClient<Organization | null >, Prisma__OrganizationClient<OrganizationGetPayload<T> | null >>;

    pings<T extends PingFindManyArgs = {}>(args?: Subset<T, PingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Ping>>, PrismaPromise<Array<PingGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PingSetup findUnique
   */
  export type PingSetupFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PingSetup
     * 
    **/
    select?: PingSetupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingSetupInclude | null
    /**
     * Throw an Error if a PingSetup can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PingSetup to fetch.
     * 
    **/
    where: PingSetupWhereUniqueInput
  }


  /**
   * PingSetup findFirst
   */
  export type PingSetupFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PingSetup
     * 
    **/
    select?: PingSetupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingSetupInclude | null
    /**
     * Throw an Error if a PingSetup can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PingSetup to fetch.
     * 
    **/
    where?: PingSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PingSetups to fetch.
     * 
    **/
    orderBy?: Enumerable<PingSetupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PingSetups.
     * 
    **/
    cursor?: PingSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PingSetups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PingSetups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PingSetups.
     * 
    **/
    distinct?: Enumerable<PingSetupScalarFieldEnum>
  }


  /**
   * PingSetup findMany
   */
  export type PingSetupFindManyArgs = {
    /**
     * Select specific fields to fetch from the PingSetup
     * 
    **/
    select?: PingSetupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingSetupInclude | null
    /**
     * Filter, which PingSetups to fetch.
     * 
    **/
    where?: PingSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PingSetups to fetch.
     * 
    **/
    orderBy?: Enumerable<PingSetupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PingSetups.
     * 
    **/
    cursor?: PingSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PingSetups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PingSetups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PingSetupScalarFieldEnum>
  }


  /**
   * PingSetup create
   */
  export type PingSetupCreateArgs = {
    /**
     * Select specific fields to fetch from the PingSetup
     * 
    **/
    select?: PingSetupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingSetupInclude | null
    /**
     * The data needed to create a PingSetup.
     * 
    **/
    data: XOR<PingSetupCreateInput, PingSetupUncheckedCreateInput>
  }


  /**
   * PingSetup createMany
   */
  export type PingSetupCreateManyArgs = {
    data: Enumerable<PingSetupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PingSetup update
   */
  export type PingSetupUpdateArgs = {
    /**
     * Select specific fields to fetch from the PingSetup
     * 
    **/
    select?: PingSetupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingSetupInclude | null
    /**
     * The data needed to update a PingSetup.
     * 
    **/
    data: XOR<PingSetupUpdateInput, PingSetupUncheckedUpdateInput>
    /**
     * Choose, which PingSetup to update.
     * 
    **/
    where: PingSetupWhereUniqueInput
  }


  /**
   * PingSetup updateMany
   */
  export type PingSetupUpdateManyArgs = {
    data: XOR<PingSetupUpdateManyMutationInput, PingSetupUncheckedUpdateManyInput>
    where?: PingSetupWhereInput
  }


  /**
   * PingSetup upsert
   */
  export type PingSetupUpsertArgs = {
    /**
     * Select specific fields to fetch from the PingSetup
     * 
    **/
    select?: PingSetupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingSetupInclude | null
    /**
     * The filter to search for the PingSetup to update in case it exists.
     * 
    **/
    where: PingSetupWhereUniqueInput
    /**
     * In case the PingSetup found by the `where` argument doesn't exist, create a new PingSetup with this data.
     * 
    **/
    create: XOR<PingSetupCreateInput, PingSetupUncheckedCreateInput>
    /**
     * In case the PingSetup was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PingSetupUpdateInput, PingSetupUncheckedUpdateInput>
  }


  /**
   * PingSetup delete
   */
  export type PingSetupDeleteArgs = {
    /**
     * Select specific fields to fetch from the PingSetup
     * 
    **/
    select?: PingSetupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingSetupInclude | null
    /**
     * Filter which PingSetup to delete.
     * 
    **/
    where: PingSetupWhereUniqueInput
  }


  /**
   * PingSetup deleteMany
   */
  export type PingSetupDeleteManyArgs = {
    where?: PingSetupWhereInput
  }


  /**
   * PingSetup without action
   */
  export type PingSetupArgs = {
    /**
     * Select specific fields to fetch from the PingSetup
     * 
    **/
    select?: PingSetupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingSetupInclude | null
  }



  /**
   * Model Ping
   */


  export type AggregatePing = {
    _count: PingCountAggregateOutputType | null
    count: PingCountAggregateOutputType | null
    _avg: PingAvgAggregateOutputType | null
    avg: PingAvgAggregateOutputType | null
    _sum: PingSumAggregateOutputType | null
    sum: PingSumAggregateOutputType | null
    _min: PingMinAggregateOutputType | null
    min: PingMinAggregateOutputType | null
    _max: PingMaxAggregateOutputType | null
    max: PingMaxAggregateOutputType | null
  }

  export type PingAvgAggregateOutputType = {
    id: number | null
    pingSetupId: number | null
    progressBar: number | null
    interval: number | null
  }

  export type PingSumAggregateOutputType = {
    id: number | null
    pingSetupId: number | null
    progressBar: number | null
    interval: number | null
  }

  export type PingMinAggregateOutputType = {
    id: number | null
    pingSetupId: number | null
    title: string | null
    tagName: string | null
    details: string | null
    progressBar: number | null
    interval: number | null
    time: Date | null
    success: boolean | null
  }

  export type PingMaxAggregateOutputType = {
    id: number | null
    pingSetupId: number | null
    title: string | null
    tagName: string | null
    details: string | null
    progressBar: number | null
    interval: number | null
    time: Date | null
    success: boolean | null
  }

  export type PingCountAggregateOutputType = {
    id: number
    pingSetupId: number
    title: number
    tagName: number
    details: number
    progressBar: number
    interval: number
    time: number
    success: number
    _all: number
  }


  export type PingAvgAggregateInputType = {
    id?: true
    pingSetupId?: true
    progressBar?: true
    interval?: true
  }

  export type PingSumAggregateInputType = {
    id?: true
    pingSetupId?: true
    progressBar?: true
    interval?: true
  }

  export type PingMinAggregateInputType = {
    id?: true
    pingSetupId?: true
    title?: true
    tagName?: true
    details?: true
    progressBar?: true
    interval?: true
    time?: true
    success?: true
  }

  export type PingMaxAggregateInputType = {
    id?: true
    pingSetupId?: true
    title?: true
    tagName?: true
    details?: true
    progressBar?: true
    interval?: true
    time?: true
    success?: true
  }

  export type PingCountAggregateInputType = {
    id?: true
    pingSetupId?: true
    title?: true
    tagName?: true
    details?: true
    progressBar?: true
    interval?: true
    time?: true
    success?: true
    _all?: true
  }

  export type PingAggregateArgs = {
    /**
     * Filter which Ping to aggregate.
     * 
    **/
    where?: PingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pings to fetch.
     * 
    **/
    orderBy?: Enumerable<PingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pings
    **/
    _count?: true | PingCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | PingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PingAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: PingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PingSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: PingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PingMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: PingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PingMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: PingMaxAggregateInputType
  }

  export type GetPingAggregateType<T extends PingAggregateArgs> = {
        [P in keyof T & keyof AggregatePing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePing[P]>
      : GetScalarType<T[P], AggregatePing[P]>
  }


    
    
  export type PingGroupByArgs = {
    where?: PingWhereInput
    orderBy?: Enumerable<PingOrderByInput>
    by: Array<PingScalarFieldEnum>
    having?: PingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PingCountAggregateInputType | true
    _avg?: PingAvgAggregateInputType
    _sum?: PingSumAggregateInputType
    _min?: PingMinAggregateInputType
    _max?: PingMaxAggregateInputType
  }


  export type PingGroupByOutputType = {
    id: number
    pingSetupId: number
    title: string | null
    tagName: string | null
    details: string | null
    progressBar: number | null
    interval: number
    time: Date
    success: boolean
    _count: PingCountAggregateOutputType | null
    _avg: PingAvgAggregateOutputType | null
    _sum: PingSumAggregateOutputType | null
    _min: PingMinAggregateOutputType | null
    _max: PingMaxAggregateOutputType | null
  }

  type GetPingGroupByPayload<T extends PingGroupByArgs> = Promise<
    Array<
      PickArray<PingGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PingGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PingGroupByOutputType[P]> 
            : GetScalarType<T[P], PingGroupByOutputType[P]>
        }
      > 
    >


  export type PingSelect = {
    id?: boolean
    pingSetup?: boolean | PingSetupArgs
    pingSetupId?: boolean
    title?: boolean
    tagName?: boolean
    details?: boolean
    progressBar?: boolean
    interval?: boolean
    time?: boolean
    success?: boolean
  }

  export type PingInclude = {
    pingSetup?: boolean | PingSetupArgs
  }

  export type PingGetPayload<
    S extends boolean | null | undefined | PingArgs,
    U = keyof S
      > = S extends true
        ? Ping
    : S extends undefined
    ? never
    : S extends PingArgs | PingFindManyArgs
    ?'include' extends U
    ? Ping  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'pingSetup'
        ? PingSetupGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Ping ?Ping [P]
  : 
          P extends 'pingSetup'
        ? PingSetupGetPayload<S['select'][P]> : never
  } 
    : Ping
  : Ping


  type PingCountArgs = Merge<
    Omit<PingFindManyArgs, 'select' | 'include'> & {
      select?: PingCountAggregateInputType | true
    }
  >

  export interface PingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Ping that matches the filter.
     * @param {PingFindUniqueArgs} args - Arguments to find a Ping
     * @example
     * // Get one Ping
     * const ping = await prisma.ping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ping'> extends True ? CheckSelect<T, Prisma__PingClient<Ping>, Prisma__PingClient<PingGetPayload<T>>> : CheckSelect<T, Prisma__PingClient<Ping | null >, Prisma__PingClient<PingGetPayload<T> | null >>

    /**
     * Find the first Ping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingFindFirstArgs} args - Arguments to find a Ping
     * @example
     * // Get one Ping
     * const ping = await prisma.ping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ping'> extends True ? CheckSelect<T, Prisma__PingClient<Ping>, Prisma__PingClient<PingGetPayload<T>>> : CheckSelect<T, Prisma__PingClient<Ping | null >, Prisma__PingClient<PingGetPayload<T> | null >>

    /**
     * Find zero or more Pings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pings
     * const pings = await prisma.ping.findMany()
     * 
     * // Get first 10 Pings
     * const pings = await prisma.ping.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pingWithIdOnly = await prisma.ping.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PingFindManyArgs>(
      args?: SelectSubset<T, PingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Ping>>, PrismaPromise<Array<PingGetPayload<T>>>>

    /**
     * Create a Ping.
     * @param {PingCreateArgs} args - Arguments to create a Ping.
     * @example
     * // Create one Ping
     * const Ping = await prisma.ping.create({
     *   data: {
     *     // ... data to create a Ping
     *   }
     * })
     * 
    **/
    create<T extends PingCreateArgs>(
      args: SelectSubset<T, PingCreateArgs>
    ): CheckSelect<T, Prisma__PingClient<Ping>, Prisma__PingClient<PingGetPayload<T>>>

    /**
     * Create many Pings.
     *     @param {PingCreateManyArgs} args - Arguments to create many Pings.
     *     @example
     *     // Create many Pings
     *     const ping = await prisma.ping.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PingCreateManyArgs>(
      args?: SelectSubset<T, PingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Ping.
     * @param {PingDeleteArgs} args - Arguments to delete one Ping.
     * @example
     * // Delete one Ping
     * const Ping = await prisma.ping.delete({
     *   where: {
     *     // ... filter to delete one Ping
     *   }
     * })
     * 
    **/
    delete<T extends PingDeleteArgs>(
      args: SelectSubset<T, PingDeleteArgs>
    ): CheckSelect<T, Prisma__PingClient<Ping>, Prisma__PingClient<PingGetPayload<T>>>

    /**
     * Update one Ping.
     * @param {PingUpdateArgs} args - Arguments to update one Ping.
     * @example
     * // Update one Ping
     * const ping = await prisma.ping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PingUpdateArgs>(
      args: SelectSubset<T, PingUpdateArgs>
    ): CheckSelect<T, Prisma__PingClient<Ping>, Prisma__PingClient<PingGetPayload<T>>>

    /**
     * Delete zero or more Pings.
     * @param {PingDeleteManyArgs} args - Arguments to filter Pings to delete.
     * @example
     * // Delete a few Pings
     * const { count } = await prisma.ping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PingDeleteManyArgs>(
      args?: SelectSubset<T, PingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pings
     * const ping = await prisma.ping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PingUpdateManyArgs>(
      args: SelectSubset<T, PingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Ping.
     * @param {PingUpsertArgs} args - Arguments to update or create a Ping.
     * @example
     * // Update or create a Ping
     * const ping = await prisma.ping.upsert({
     *   create: {
     *     // ... data to create a Ping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ping we want to update
     *   }
     * })
    **/
    upsert<T extends PingUpsertArgs>(
      args: SelectSubset<T, PingUpsertArgs>
    ): CheckSelect<T, Prisma__PingClient<Ping>, Prisma__PingClient<PingGetPayload<T>>>

    /**
     * Count the number of Pings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingCountArgs} args - Arguments to filter Pings to count.
     * @example
     * // Count the number of Pings
     * const count = await prisma.ping.count({
     *   where: {
     *     // ... the filter for the Pings we want to count
     *   }
     * })
    **/
    count<T extends PingCountArgs>(
      args?: Subset<T, PingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PingAggregateArgs>(args: Subset<T, PingAggregateArgs>): PrismaPromise<GetPingAggregateType<T>>

    /**
     * Group by Ping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PingGroupByArgs['orderBy'] }
        : { orderBy?: PingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPingGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    pingSetup<T extends PingSetupArgs = {}>(args?: Subset<T, PingSetupArgs>): CheckSelect<T, Prisma__PingSetupClient<PingSetup | null >, Prisma__PingSetupClient<PingSetupGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Ping findUnique
   */
  export type PingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Ping
     * 
    **/
    select?: PingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingInclude | null
    /**
     * Throw an Error if a Ping can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Ping to fetch.
     * 
    **/
    where: PingWhereUniqueInput
  }


  /**
   * Ping findFirst
   */
  export type PingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Ping
     * 
    **/
    select?: PingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingInclude | null
    /**
     * Throw an Error if a Ping can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Ping to fetch.
     * 
    **/
    where?: PingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pings to fetch.
     * 
    **/
    orderBy?: Enumerable<PingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pings.
     * 
    **/
    cursor?: PingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pings.
     * 
    **/
    distinct?: Enumerable<PingScalarFieldEnum>
  }


  /**
   * Ping findMany
   */
  export type PingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ping
     * 
    **/
    select?: PingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingInclude | null
    /**
     * Filter, which Pings to fetch.
     * 
    **/
    where?: PingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pings to fetch.
     * 
    **/
    orderBy?: Enumerable<PingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pings.
     * 
    **/
    cursor?: PingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PingScalarFieldEnum>
  }


  /**
   * Ping create
   */
  export type PingCreateArgs = {
    /**
     * Select specific fields to fetch from the Ping
     * 
    **/
    select?: PingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingInclude | null
    /**
     * The data needed to create a Ping.
     * 
    **/
    data: XOR<PingCreateInput, PingUncheckedCreateInput>
  }


  /**
   * Ping createMany
   */
  export type PingCreateManyArgs = {
    data: Enumerable<PingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Ping update
   */
  export type PingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ping
     * 
    **/
    select?: PingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingInclude | null
    /**
     * The data needed to update a Ping.
     * 
    **/
    data: XOR<PingUpdateInput, PingUncheckedUpdateInput>
    /**
     * Choose, which Ping to update.
     * 
    **/
    where: PingWhereUniqueInput
  }


  /**
   * Ping updateMany
   */
  export type PingUpdateManyArgs = {
    data: XOR<PingUpdateManyMutationInput, PingUncheckedUpdateManyInput>
    where?: PingWhereInput
  }


  /**
   * Ping upsert
   */
  export type PingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ping
     * 
    **/
    select?: PingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingInclude | null
    /**
     * The filter to search for the Ping to update in case it exists.
     * 
    **/
    where: PingWhereUniqueInput
    /**
     * In case the Ping found by the `where` argument doesn't exist, create a new Ping with this data.
     * 
    **/
    create: XOR<PingCreateInput, PingUncheckedCreateInput>
    /**
     * In case the Ping was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PingUpdateInput, PingUncheckedUpdateInput>
  }


  /**
   * Ping delete
   */
  export type PingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ping
     * 
    **/
    select?: PingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingInclude | null
    /**
     * Filter which Ping to delete.
     * 
    **/
    where: PingWhereUniqueInput
  }


  /**
   * Ping deleteMany
   */
  export type PingDeleteManyArgs = {
    where?: PingWhereInput
  }


  /**
   * Ping without action
   */
  export type PingArgs = {
    /**
     * Select specific fields to fetch from the Ping
     * 
    **/
    select?: PingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PingInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    passwordHash: 'passwordHash',
    authCode: 'authCode',
    authCodeExpiresAt: 'authCodeExpiresAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ApiKeyScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    apiKey: 'apiKey'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const PingSetupScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    groupName: 'groupName',
    emails: 'emails',
    notified: 'notified'
  };

  export type PingSetupScalarFieldEnum = (typeof PingSetupScalarFieldEnum)[keyof typeof PingSetupScalarFieldEnum]


  export const PingScalarFieldEnum: {
    id: 'id',
    pingSetupId: 'pingSetupId',
    title: 'title',
    tagName: 'tagName',
    details: 'details',
    progressBar: 'progressBar',
    interval: 'interval',
    time: 'time',
    success: 'success'
  };

  export type PingScalarFieldEnum = (typeof PingScalarFieldEnum)[keyof typeof PingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type OrganizationWhereInput = {
    AND?: Enumerable<OrganizationWhereInput>
    OR?: Enumerable<OrganizationWhereInput>
    NOT?: Enumerable<OrganizationWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    users?: UserListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
    pingSetups?: PingSetupListRelationFilter
  }

  export type OrganizationOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OrganizationWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    email?: StringFilter | string
    passwordHash?: StringNullableFilter | string | null
    organizations?: OrganizationListRelationFilter
    authCode?: StringNullableFilter | string | null
    authCodeExpiresAt?: DateTimeNullableFilter | Date | string | null
  }

  export type UserOrderByInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    authCode?: SortOrder
    authCodeExpiresAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    passwordHash?: StringNullableWithAggregatesFilter | string | null
    authCode?: StringNullableWithAggregatesFilter | string | null
    authCodeExpiresAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ApiKeyWhereInput = {
    AND?: Enumerable<ApiKeyWhereInput>
    OR?: Enumerable<ApiKeyWhereInput>
    NOT?: Enumerable<ApiKeyWhereInput>
    id?: IntFilter | number
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    organizationId?: IntFilter | number
    apiKey?: StringNullableFilter | string | null
  }

  export type ApiKeyOrderByInput = {
    id?: SortOrder
    organizationId?: SortOrder
    apiKey?: SortOrder
  }

  export type ApiKeyWhereUniqueInput = {
    id?: number
    apiKey?: string
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    organizationId?: IntWithAggregatesFilter | number
    apiKey?: StringNullableWithAggregatesFilter | string | null
  }

  export type PingSetupWhereInput = {
    AND?: Enumerable<PingSetupWhereInput>
    OR?: Enumerable<PingSetupWhereInput>
    NOT?: Enumerable<PingSetupWhereInput>
    id?: IntFilter | number
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    organizationId?: IntFilter | number
    name?: StringFilter | string
    groupName?: StringFilter | string
    emails?: StringNullableListFilter
    notified?: BoolFilter | boolean
    pings?: PingListRelationFilter
  }

  export type PingSetupOrderByInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    groupName?: SortOrder
    emails?: SortOrder
    notified?: SortOrder
  }

  export type PingSetupWhereUniqueInput = {
    id?: number
    organizationId_name_groupName?: PingSetupOrganizationIdNameGroupNameCompoundUniqueInput
  }

  export type PingSetupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PingSetupScalarWhereWithAggregatesInput>
    OR?: Enumerable<PingSetupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PingSetupScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    organizationId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    groupName?: StringWithAggregatesFilter | string
    emails?: StringNullableListFilter
    notified?: BoolWithAggregatesFilter | boolean
  }

  export type PingWhereInput = {
    AND?: Enumerable<PingWhereInput>
    OR?: Enumerable<PingWhereInput>
    NOT?: Enumerable<PingWhereInput>
    id?: IntFilter | number
    pingSetup?: XOR<PingSetupRelationFilter, PingSetupWhereInput>
    pingSetupId?: IntFilter | number
    title?: StringNullableFilter | string | null
    tagName?: StringNullableFilter | string | null
    details?: StringNullableFilter | string | null
    progressBar?: IntNullableFilter | number | null
    interval?: IntFilter | number
    time?: DateTimeFilter | Date | string
    success?: BoolFilter | boolean
  }

  export type PingOrderByInput = {
    id?: SortOrder
    pingSetupId?: SortOrder
    title?: SortOrder
    tagName?: SortOrder
    details?: SortOrder
    progressBar?: SortOrder
    interval?: SortOrder
    time?: SortOrder
    success?: SortOrder
  }

  export type PingWhereUniqueInput = {
    id?: number
  }

  export type PingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PingScalarWhereWithAggregatesInput>
    OR?: Enumerable<PingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    pingSetupId?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    tagName?: StringNullableWithAggregatesFilter | string | null
    details?: StringNullableWithAggregatesFilter | string | null
    progressBar?: IntNullableWithAggregatesFilter | number | null
    interval?: IntWithAggregatesFilter | number
    time?: DateTimeWithAggregatesFilter | Date | string
    success?: BoolWithAggregatesFilter | boolean
  }

  export type OrganizationCreateInput = {
    name?: string | null
    users?: UserCreateNestedManyWithoutOrganizationsInput
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    pingSetups?: PingSetupCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    name?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    pingSetups?: PingSetupUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutOrganizationsInput
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationInput
    pingSetups?: PingSetupUpdateManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationInput
    pingSetups?: PingSetupUncheckedUpdateManyWithoutOrganizationInput
  }

  export type OrganizationCreateManyInput = {
    id?: number
    name?: string | null
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    passwordHash?: string | null
    authCode?: string | null
    authCodeExpiresAt?: Date | string | null
    organizations?: OrganizationCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    passwordHash?: string | null
    authCode?: string | null
    authCodeExpiresAt?: Date | string | null
  }

  export type UserUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    authCodeExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizations?: OrganizationUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    authCodeExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    passwordHash?: string | null
    authCode?: string | null
    authCodeExpiresAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    authCodeExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    authCodeExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyCreateInput = {
    apiKey?: string | null
    organization: OrganizationCreateNestedOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedCreateInput = {
    id?: number
    organizationId: number
    apiKey?: string | null
  }

  export type ApiKeyUpdateInput = {
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneRequiredWithoutApiKeysInput
  }

  export type ApiKeyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyCreateManyInput = {
    id?: number
    organizationId: number
    apiKey?: string | null
  }

  export type ApiKeyUpdateManyMutationInput = {
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PingSetupCreateInput = {
    name: string
    groupName?: string
    notified?: boolean
    emails?: PingSetupCreateemailsInput | Enumerable<string>
    organization: OrganizationCreateNestedOneWithoutPingSetupsInput
    pings?: PingCreateNestedManyWithoutPingSetupInput
  }

  export type PingSetupUncheckedCreateInput = {
    id?: number
    organizationId: number
    name: string
    groupName?: string
    notified?: boolean
    emails?: PingSetupCreateemailsInput | Enumerable<string>
    pings?: PingUncheckedCreateNestedManyWithoutPingSetupInput
  }

  export type PingSetupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
    organization?: OrganizationUpdateOneRequiredWithoutPingSetupsInput
    pings?: PingUpdateManyWithoutPingSetupInput
  }

  export type PingSetupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
    pings?: PingUncheckedUpdateManyWithoutPingSetupInput
  }

  export type PingSetupCreateManyInput = {
    id?: number
    organizationId: number
    name: string
    groupName?: string
    notified?: boolean
    emails?: PingSetupCreateManyemailsInput | Enumerable<string>
  }

  export type PingSetupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
  }

  export type PingSetupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
  }

  export type PingCreateInput = {
    title?: string | null
    tagName?: string | null
    details?: string | null
    progressBar?: number | null
    interval: number
    time: Date | string
    success?: boolean
    pingSetup: PingSetupCreateNestedOneWithoutPingsInput
  }

  export type PingUncheckedCreateInput = {
    id?: number
    pingSetupId: number
    title?: string | null
    tagName?: string | null
    details?: string | null
    progressBar?: number | null
    interval: number
    time: Date | string
    success?: boolean
  }

  export type PingUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    tagName?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    progressBar?: NullableIntFieldUpdateOperationsInput | number | null
    interval?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
    pingSetup?: PingSetupUpdateOneRequiredWithoutPingsInput
  }

  export type PingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pingSetupId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    tagName?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    progressBar?: NullableIntFieldUpdateOperationsInput | number | null
    interval?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PingCreateManyInput = {
    id?: number
    pingSetupId: number
    title?: string | null
    tagName?: string | null
    details?: string | null
    progressBar?: number | null
    interval: number
    time: Date | string
    success?: boolean
  }

  export type PingUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    tagName?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    progressBar?: NullableIntFieldUpdateOperationsInput | number | null
    interval?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pingSetupId?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    tagName?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    progressBar?: NullableIntFieldUpdateOperationsInput | number | null
    interval?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ApiKeyListRelationFilter = {
    every?: ApiKeyWhereInput
    some?: ApiKeyWhereInput
    none?: ApiKeyWhereInput
  }

  export type PingSetupListRelationFilter = {
    every?: PingSetupWhereInput
    some?: PingSetupWhereInput
    none?: PingSetupWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type OrganizationListRelationFilter = {
    every?: OrganizationWhereInput
    some?: OrganizationWhereInput
    none?: OrganizationWhereInput
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type PingListRelationFilter = {
    every?: PingWhereInput
    some?: PingWhereInput
    none?: PingWhereInput
  }

  export type PingSetupOrganizationIdNameGroupNameCompoundUniqueInput = {
    organizationId: number
    name: string
    groupName: string
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type PingSetupRelationFilter = {
    is?: PingSetupWhereInput
    isNot?: PingSetupWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type UserCreateNestedManyWithoutOrganizationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationsInput>, Enumerable<UserUncheckedCreateWithoutOrganizationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ApiKeyCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutOrganizationInput>, Enumerable<ApiKeyUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutOrganizationInput>
    createMany?: ApiKeyCreateManyOrganizationInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type PingSetupCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<PingSetupCreateWithoutOrganizationInput>, Enumerable<PingSetupUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<PingSetupCreateOrConnectWithoutOrganizationInput>
    createMany?: PingSetupCreateManyOrganizationInputEnvelope
    connect?: Enumerable<PingSetupWhereUniqueInput>
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutOrganizationInput>, Enumerable<ApiKeyUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutOrganizationInput>
    createMany?: ApiKeyCreateManyOrganizationInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type PingSetupUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<PingSetupCreateWithoutOrganizationInput>, Enumerable<PingSetupUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<PingSetupCreateOrConnectWithoutOrganizationInput>
    createMany?: PingSetupCreateManyOrganizationInputEnvelope
    connect?: Enumerable<PingSetupWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateManyWithoutOrganizationsInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationsInput>, Enumerable<UserUncheckedCreateWithoutOrganizationsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutOrganizationsInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutOrganizationsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutOrganizationsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ApiKeyUpdateManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutOrganizationInput>, Enumerable<ApiKeyUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: ApiKeyCreateManyOrganizationInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type PingSetupUpdateManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<PingSetupCreateWithoutOrganizationInput>, Enumerable<PingSetupUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<PingSetupCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<PingSetupUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: PingSetupCreateManyOrganizationInputEnvelope
    connect?: Enumerable<PingSetupWhereUniqueInput>
    set?: Enumerable<PingSetupWhereUniqueInput>
    disconnect?: Enumerable<PingSetupWhereUniqueInput>
    delete?: Enumerable<PingSetupWhereUniqueInput>
    update?: Enumerable<PingSetupUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<PingSetupUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<PingSetupScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApiKeyUncheckedUpdateManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutOrganizationInput>, Enumerable<ApiKeyUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: ApiKeyCreateManyOrganizationInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type PingSetupUncheckedUpdateManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<PingSetupCreateWithoutOrganizationInput>, Enumerable<PingSetupUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<PingSetupCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<PingSetupUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: PingSetupCreateManyOrganizationInputEnvelope
    connect?: Enumerable<PingSetupWhereUniqueInput>
    set?: Enumerable<PingSetupWhereUniqueInput>
    disconnect?: Enumerable<PingSetupWhereUniqueInput>
    delete?: Enumerable<PingSetupWhereUniqueInput>
    update?: Enumerable<PingSetupUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<PingSetupUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<PingSetupScalarWhereInput>
  }

  export type OrganizationCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutUsersInput>, Enumerable<OrganizationUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<OrganizationWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type OrganizationUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutUsersInput>, Enumerable<OrganizationUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<OrganizationUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<OrganizationWhereUniqueInput>
    set?: Enumerable<OrganizationWhereUniqueInput>
    disconnect?: Enumerable<OrganizationWhereUniqueInput>
    delete?: Enumerable<OrganizationWhereUniqueInput>
    update?: Enumerable<OrganizationUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<OrganizationUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<OrganizationScalarWhereInput>
  }

  export type OrganizationCreateNestedOneWithoutApiKeysInput = {
    create?: XOR<OrganizationCreateWithoutApiKeysInput, OrganizationUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutApiKeysInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutApiKeysInput = {
    create?: XOR<OrganizationCreateWithoutApiKeysInput, OrganizationUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutApiKeysInput
    upsert?: OrganizationUpsertWithoutApiKeysInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutApiKeysInput, OrganizationUncheckedUpdateWithoutApiKeysInput>
  }

  export type PingSetupCreateemailsInput = {
    set: Enumerable<string>
  }

  export type OrganizationCreateNestedOneWithoutPingSetupsInput = {
    create?: XOR<OrganizationCreateWithoutPingSetupsInput, OrganizationUncheckedCreateWithoutPingSetupsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPingSetupsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type PingCreateNestedManyWithoutPingSetupInput = {
    create?: XOR<Enumerable<PingCreateWithoutPingSetupInput>, Enumerable<PingUncheckedCreateWithoutPingSetupInput>>
    connectOrCreate?: Enumerable<PingCreateOrConnectWithoutPingSetupInput>
    createMany?: PingCreateManyPingSetupInputEnvelope
    connect?: Enumerable<PingWhereUniqueInput>
  }

  export type PingUncheckedCreateNestedManyWithoutPingSetupInput = {
    create?: XOR<Enumerable<PingCreateWithoutPingSetupInput>, Enumerable<PingUncheckedCreateWithoutPingSetupInput>>
    connectOrCreate?: Enumerable<PingCreateOrConnectWithoutPingSetupInput>
    createMany?: PingCreateManyPingSetupInputEnvelope
    connect?: Enumerable<PingWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PingSetupUpdateemailsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type OrganizationUpdateOneRequiredWithoutPingSetupsInput = {
    create?: XOR<OrganizationCreateWithoutPingSetupsInput, OrganizationUncheckedCreateWithoutPingSetupsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutPingSetupsInput
    upsert?: OrganizationUpsertWithoutPingSetupsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutPingSetupsInput, OrganizationUncheckedUpdateWithoutPingSetupsInput>
  }

  export type PingUpdateManyWithoutPingSetupInput = {
    create?: XOR<Enumerable<PingCreateWithoutPingSetupInput>, Enumerable<PingUncheckedCreateWithoutPingSetupInput>>
    connectOrCreate?: Enumerable<PingCreateOrConnectWithoutPingSetupInput>
    upsert?: Enumerable<PingUpsertWithWhereUniqueWithoutPingSetupInput>
    createMany?: PingCreateManyPingSetupInputEnvelope
    connect?: Enumerable<PingWhereUniqueInput>
    set?: Enumerable<PingWhereUniqueInput>
    disconnect?: Enumerable<PingWhereUniqueInput>
    delete?: Enumerable<PingWhereUniqueInput>
    update?: Enumerable<PingUpdateWithWhereUniqueWithoutPingSetupInput>
    updateMany?: Enumerable<PingUpdateManyWithWhereWithoutPingSetupInput>
    deleteMany?: Enumerable<PingScalarWhereInput>
  }

  export type PingUncheckedUpdateManyWithoutPingSetupInput = {
    create?: XOR<Enumerable<PingCreateWithoutPingSetupInput>, Enumerable<PingUncheckedCreateWithoutPingSetupInput>>
    connectOrCreate?: Enumerable<PingCreateOrConnectWithoutPingSetupInput>
    upsert?: Enumerable<PingUpsertWithWhereUniqueWithoutPingSetupInput>
    createMany?: PingCreateManyPingSetupInputEnvelope
    connect?: Enumerable<PingWhereUniqueInput>
    set?: Enumerable<PingWhereUniqueInput>
    disconnect?: Enumerable<PingWhereUniqueInput>
    delete?: Enumerable<PingWhereUniqueInput>
    update?: Enumerable<PingUpdateWithWhereUniqueWithoutPingSetupInput>
    updateMany?: Enumerable<PingUpdateManyWithWhereWithoutPingSetupInput>
    deleteMany?: Enumerable<PingScalarWhereInput>
  }

  export type PingSetupCreateManyemailsInput = {
    set: Enumerable<string>
  }

  export type PingSetupCreateNestedOneWithoutPingsInput = {
    create?: XOR<PingSetupCreateWithoutPingsInput, PingSetupUncheckedCreateWithoutPingsInput>
    connectOrCreate?: PingSetupCreateOrConnectWithoutPingsInput
    connect?: PingSetupWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PingSetupUpdateOneRequiredWithoutPingsInput = {
    create?: XOR<PingSetupCreateWithoutPingsInput, PingSetupUncheckedCreateWithoutPingsInput>
    connectOrCreate?: PingSetupCreateOrConnectWithoutPingsInput
    upsert?: PingSetupUpsertWithoutPingsInput
    connect?: PingSetupWhereUniqueInput
    update?: XOR<PingSetupUpdateWithoutPingsInput, PingSetupUncheckedUpdateWithoutPingsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type UserCreateWithoutOrganizationsInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    passwordHash?: string | null
    authCode?: string | null
    authCodeExpiresAt?: Date | string | null
  }

  export type UserUncheckedCreateWithoutOrganizationsInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    passwordHash?: string | null
    authCode?: string | null
    authCodeExpiresAt?: Date | string | null
  }

  export type UserCreateOrConnectWithoutOrganizationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationsInput, UserUncheckedCreateWithoutOrganizationsInput>
  }

  export type ApiKeyCreateWithoutOrganizationInput = {
    apiKey?: string | null
  }

  export type ApiKeyUncheckedCreateWithoutOrganizationInput = {
    id?: number
    apiKey?: string | null
  }

  export type ApiKeyCreateOrConnectWithoutOrganizationInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutOrganizationInput, ApiKeyUncheckedCreateWithoutOrganizationInput>
  }

  export type ApiKeyCreateManyOrganizationInputEnvelope = {
    data: Enumerable<ApiKeyCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type PingSetupCreateWithoutOrganizationInput = {
    name: string
    groupName?: string
    notified?: boolean
    emails?: PingSetupCreateemailsInput | Enumerable<string>
    pings?: PingCreateNestedManyWithoutPingSetupInput
  }

  export type PingSetupUncheckedCreateWithoutOrganizationInput = {
    id?: number
    name: string
    groupName?: string
    notified?: boolean
    emails?: PingSetupCreateemailsInput | Enumerable<string>
    pings?: PingUncheckedCreateNestedManyWithoutPingSetupInput
  }

  export type PingSetupCreateOrConnectWithoutOrganizationInput = {
    where: PingSetupWhereUniqueInput
    create: XOR<PingSetupCreateWithoutOrganizationInput, PingSetupUncheckedCreateWithoutOrganizationInput>
  }

  export type PingSetupCreateManyOrganizationInputEnvelope = {
    data: Enumerable<PingSetupCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationsInput, UserUncheckedUpdateWithoutOrganizationsInput>
    create: XOR<UserCreateWithoutOrganizationsInput, UserUncheckedCreateWithoutOrganizationsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationsInput, UserUncheckedUpdateWithoutOrganizationsInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    email?: StringFilter | string
    passwordHash?: StringNullableFilter | string | null
    authCode?: StringNullableFilter | string | null
    authCodeExpiresAt?: DateTimeNullableFilter | Date | string | null
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutOrganizationInput, ApiKeyUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ApiKeyCreateWithoutOrganizationInput, ApiKeyUncheckedCreateWithoutOrganizationInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutOrganizationInput, ApiKeyUncheckedUpdateWithoutOrganizationInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutOrganizationInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutApiKeysInput>
  }

  export type ApiKeyScalarWhereInput = {
    AND?: Enumerable<ApiKeyScalarWhereInput>
    OR?: Enumerable<ApiKeyScalarWhereInput>
    NOT?: Enumerable<ApiKeyScalarWhereInput>
    id?: IntFilter | number
    organizationId?: IntFilter | number
    apiKey?: StringNullableFilter | string | null
  }

  export type PingSetupUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: PingSetupWhereUniqueInput
    update: XOR<PingSetupUpdateWithoutOrganizationInput, PingSetupUncheckedUpdateWithoutOrganizationInput>
    create: XOR<PingSetupCreateWithoutOrganizationInput, PingSetupUncheckedCreateWithoutOrganizationInput>
  }

  export type PingSetupUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: PingSetupWhereUniqueInput
    data: XOR<PingSetupUpdateWithoutOrganizationInput, PingSetupUncheckedUpdateWithoutOrganizationInput>
  }

  export type PingSetupUpdateManyWithWhereWithoutOrganizationInput = {
    where: PingSetupScalarWhereInput
    data: XOR<PingSetupUpdateManyMutationInput, PingSetupUncheckedUpdateManyWithoutPingSetupsInput>
  }

  export type PingSetupScalarWhereInput = {
    AND?: Enumerable<PingSetupScalarWhereInput>
    OR?: Enumerable<PingSetupScalarWhereInput>
    NOT?: Enumerable<PingSetupScalarWhereInput>
    id?: IntFilter | number
    organizationId?: IntFilter | number
    name?: StringFilter | string
    groupName?: StringFilter | string
    emails?: StringNullableListFilter
    notified?: BoolFilter | boolean
  }

  export type OrganizationCreateWithoutUsersInput = {
    name?: string | null
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
    pingSetups?: PingSetupCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: number
    name?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
    pingSetups?: PingSetupUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationUpsertWithWhereUniqueWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationUpdateWithWhereUniqueWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateManyWithWhereWithoutUsersInput = {
    where: OrganizationScalarWhereInput
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyWithoutOrganizationsInput>
  }

  export type OrganizationScalarWhereInput = {
    AND?: Enumerable<OrganizationScalarWhereInput>
    OR?: Enumerable<OrganizationScalarWhereInput>
    NOT?: Enumerable<OrganizationScalarWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
  }

  export type OrganizationCreateWithoutApiKeysInput = {
    name?: string | null
    users?: UserCreateNestedManyWithoutOrganizationsInput
    pingSetups?: PingSetupCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutApiKeysInput = {
    id?: number
    name?: string | null
    pingSetups?: PingSetupUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutApiKeysInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutApiKeysInput, OrganizationUncheckedCreateWithoutApiKeysInput>
  }

  export type OrganizationUpsertWithoutApiKeysInput = {
    update: XOR<OrganizationUpdateWithoutApiKeysInput, OrganizationUncheckedUpdateWithoutApiKeysInput>
    create: XOR<OrganizationCreateWithoutApiKeysInput, OrganizationUncheckedCreateWithoutApiKeysInput>
  }

  export type OrganizationUpdateWithoutApiKeysInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutOrganizationsInput
    pingSetups?: PingSetupUpdateManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedUpdateWithoutApiKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pingSetups?: PingSetupUncheckedUpdateManyWithoutOrganizationInput
  }

  export type OrganizationCreateWithoutPingSetupsInput = {
    name?: string | null
    users?: UserCreateNestedManyWithoutOrganizationsInput
    apiKeys?: ApiKeyCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutPingSetupsInput = {
    id?: number
    name?: string | null
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutPingSetupsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutPingSetupsInput, OrganizationUncheckedCreateWithoutPingSetupsInput>
  }

  export type PingCreateWithoutPingSetupInput = {
    title?: string | null
    tagName?: string | null
    details?: string | null
    progressBar?: number | null
    interval: number
    time: Date | string
    success?: boolean
  }

  export type PingUncheckedCreateWithoutPingSetupInput = {
    id?: number
    title?: string | null
    tagName?: string | null
    details?: string | null
    progressBar?: number | null
    interval: number
    time: Date | string
    success?: boolean
  }

  export type PingCreateOrConnectWithoutPingSetupInput = {
    where: PingWhereUniqueInput
    create: XOR<PingCreateWithoutPingSetupInput, PingUncheckedCreateWithoutPingSetupInput>
  }

  export type PingCreateManyPingSetupInputEnvelope = {
    data: Enumerable<PingCreateManyPingSetupInput>
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutPingSetupsInput = {
    update: XOR<OrganizationUpdateWithoutPingSetupsInput, OrganizationUncheckedUpdateWithoutPingSetupsInput>
    create: XOR<OrganizationCreateWithoutPingSetupsInput, OrganizationUncheckedCreateWithoutPingSetupsInput>
  }

  export type OrganizationUpdateWithoutPingSetupsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutOrganizationsInput
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedUpdateWithoutPingSetupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationInput
  }

  export type PingUpsertWithWhereUniqueWithoutPingSetupInput = {
    where: PingWhereUniqueInput
    update: XOR<PingUpdateWithoutPingSetupInput, PingUncheckedUpdateWithoutPingSetupInput>
    create: XOR<PingCreateWithoutPingSetupInput, PingUncheckedCreateWithoutPingSetupInput>
  }

  export type PingUpdateWithWhereUniqueWithoutPingSetupInput = {
    where: PingWhereUniqueInput
    data: XOR<PingUpdateWithoutPingSetupInput, PingUncheckedUpdateWithoutPingSetupInput>
  }

  export type PingUpdateManyWithWhereWithoutPingSetupInput = {
    where: PingScalarWhereInput
    data: XOR<PingUpdateManyMutationInput, PingUncheckedUpdateManyWithoutPingsInput>
  }

  export type PingScalarWhereInput = {
    AND?: Enumerable<PingScalarWhereInput>
    OR?: Enumerable<PingScalarWhereInput>
    NOT?: Enumerable<PingScalarWhereInput>
    id?: IntFilter | number
    pingSetupId?: IntFilter | number
    title?: StringNullableFilter | string | null
    tagName?: StringNullableFilter | string | null
    details?: StringNullableFilter | string | null
    progressBar?: IntNullableFilter | number | null
    interval?: IntFilter | number
    time?: DateTimeFilter | Date | string
    success?: BoolFilter | boolean
  }

  export type PingSetupCreateWithoutPingsInput = {
    name: string
    groupName?: string
    notified?: boolean
    emails?: PingSetupCreateemailsInput | Enumerable<string>
    organization: OrganizationCreateNestedOneWithoutPingSetupsInput
  }

  export type PingSetupUncheckedCreateWithoutPingsInput = {
    id?: number
    organizationId: number
    name: string
    groupName?: string
    notified?: boolean
    emails?: PingSetupCreateemailsInput | Enumerable<string>
  }

  export type PingSetupCreateOrConnectWithoutPingsInput = {
    where: PingSetupWhereUniqueInput
    create: XOR<PingSetupCreateWithoutPingsInput, PingSetupUncheckedCreateWithoutPingsInput>
  }

  export type PingSetupUpsertWithoutPingsInput = {
    update: XOR<PingSetupUpdateWithoutPingsInput, PingSetupUncheckedUpdateWithoutPingsInput>
    create: XOR<PingSetupCreateWithoutPingsInput, PingSetupUncheckedCreateWithoutPingsInput>
  }

  export type PingSetupUpdateWithoutPingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
    organization?: OrganizationUpdateOneRequiredWithoutPingSetupsInput
  }

  export type PingSetupUncheckedUpdateWithoutPingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
  }

  export type ApiKeyCreateManyOrganizationInput = {
    id?: number
    apiKey?: string | null
  }

  export type PingSetupCreateManyOrganizationInput = {
    id?: number
    name: string
    groupName?: string
    notified?: boolean
    emails?: PingSetupCreateManyemailsInput | Enumerable<string>
  }

  export type UserUpdateWithoutOrganizationsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    authCodeExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutOrganizationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    authCodeExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    authCodeExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyUpdateWithoutOrganizationInput = {
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyUncheckedUpdateManyWithoutApiKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PingSetupUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
    pings?: PingUpdateManyWithoutPingSetupInput
  }

  export type PingSetupUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
    pings?: PingUncheckedUpdateManyWithoutPingSetupInput
  }

  export type PingSetupUncheckedUpdateManyWithoutPingSetupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    notified?: BoolFieldUpdateOperationsInput | boolean
    emails?: PingSetupUpdateemailsInput | Enumerable<string>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUpdateManyWithoutOrganizationInput
    pingSetups?: PingSetupUpdateManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutOrganizationInput
    pingSetups?: PingSetupUncheckedUpdateManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedUpdateManyWithoutOrganizationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PingCreateManyPingSetupInput = {
    id?: number
    title?: string | null
    tagName?: string | null
    details?: string | null
    progressBar?: number | null
    interval: number
    time: Date | string
    success?: boolean
  }

  export type PingUpdateWithoutPingSetupInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    tagName?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    progressBar?: NullableIntFieldUpdateOperationsInput | number | null
    interval?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PingUncheckedUpdateWithoutPingSetupInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    tagName?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    progressBar?: NullableIntFieldUpdateOperationsInput | number | null
    interval?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PingUncheckedUpdateManyWithoutPingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    tagName?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    progressBar?: NullableIntFieldUpdateOperationsInput | number | null
    interval?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}